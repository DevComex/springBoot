<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="admin-PC" name="Default test" tests="90" failures="3" timestamp="2 Jun 2017 09:47:15 GMT" time="2.934" errors="0">
  <testcase name="createHead_whenInsertSuccess_thenReturnTrue" time="0.318" classname="cn.mahjong.service.HeadServiceTest"/>
  <testcase name="createHead_whenPhoneDuplicate_thenReturnFalse" time="0.001" classname="cn.mahjong.service.HeadServiceTest"/>
  <testcase name="createHead_whenVerifyCodeWrong_thenReturnFalse" time="0.002" classname="cn.mahjong.service.HeadServiceTest"/>
  <testcase name="getHead_whenUserNotExist_thenReturnNull" time="0.001" classname="cn.mahjong.service.HeadServiceTest"/>
  <testcase name="getHead_whenUserNotParent_thenReturnNull" time="0.002" classname="cn.mahjong.service.HeadServiceTest"/>
  <testcase name="getHead_whenUserStatusNotMatch_thenReturnNull" time="0.003" classname="cn.mahjong.service.HeadServiceTest"/>
  <testcase name="getHeads_whenGetList_thenReturnList" time="0.002" classname="cn.mahjong.service.HeadServiceTest">
    <failure type="java.lang.NoSuchMethodError" message="com.beust.jcommander.internal.Lists.newArrayList([Ljava/lang/Object;)Ljava/util/List;">
      <![CDATA[java.lang.NoSuchMethodError: com.beust.jcommander.internal.Lists.newArrayList([Ljava/lang/Object;)Ljava/util/List;
	at cn.mahjong.service.HeadServiceTest.getHeads_whenGetList_thenReturnList(HeadServiceTest.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:335)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:330)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
    </failure>
  </testcase> <!-- getHeads_whenGetList_thenReturnList -->
  <testcase name="update_whenDBUpdateSuccess_thenReturnTrue" time="0.008" classname="cn.mahjong.service.HeadServiceTest">
    <failure type="org.mockito.exceptions.misusing.UnfinishedStubbingException" message="
Unfinished stubbing detected here:
-&amp;gt; at cn.mahjong.service.HeadServiceTest.getHeads_whenGetList_thenReturnList(HeadServiceTest.java:56)

E.g. thenReturn() may be missing.
Examples of correct stubbing:
    when(mock.isOk()).thenReturn(true);
    when(mock.isOk()).thenThrow(exception);
    doThrow(exception).when(mock).someVoidMethod();
Hints:
 1. missing thenReturn()
 2. you are trying to stub a final method, you naughty developer!
 3: you are stubbing the behaviour of another mock inside before &amp;apos;thenReturn&amp;apos; instruction if completed
">
      <![CDATA[org.mockito.exceptions.misusing.UnfinishedStubbingException: 
Unfinished stubbing detected here:
-> at cn.mahjong.service.HeadServiceTest.getHeads_whenGetList_thenReturnList(HeadServiceTest.java:56)

E.g. thenReturn() may be missing.
Examples of correct stubbing:
    when(mock.isOk()).thenReturn(true);
    when(mock.isOk()).thenThrow(exception);
    doThrow(exception).when(mock).someVoidMethod();
Hints:
 1. missing thenReturn()
 2. you are trying to stub a final method, you naughty developer!
 3: you are stubbing the behaviour of another mock inside before 'thenReturn' instruction if completed

	at cn.mahjong.service.HeadServiceTest.update_whenDBUpdateSuccess_thenReturnTrue(HeadServiceTest.java:158)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:335)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:330)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
    </failure>
  </testcase> <!-- update_whenDBUpdateSuccess_thenReturnTrue -->
  <testcase name="checkCaptcha_whenBidNullRedisCaptchaEqual_thenReturnFalse" time="0.023" classname="cn.mahjong.service.CaptchaServiceImplTest"/>
  <testcase name="checkCaptcha_whenRedisCaptchaEmpty_thenReturnFalse" time="0.002" classname="cn.mahjong.service.CaptchaServiceImplTest"/>
  <testcase name="checkCaptcha_whenRedisCaptchaEqual_thenReturnFalse" time="0.001" classname="cn.mahjong.service.CaptchaServiceImplTest"/>
  <testcase name="checkCaptcha_whenRedisCaptchaNotEqual_thenReturnFalse" time="0.002" classname="cn.mahjong.service.CaptchaServiceImplTest"/>
  <testcase name="getSummary_whenDBQuerySuccess_thenReturnTrue" time="0.253" classname="cn.mahjong.service.RechargeServiceImplTest"/>
  <testcase name="get_whenDBQuerySuccess_thenReturnTrue" time="0.003" classname="cn.mahjong.service.RechargeServiceImplTest"/>
  <testcase name="recharge_whenAmountEquals0_thenReturnFalse" time="0.019" classname="cn.mahjong.service.RechargeServiceImplTest"/>
  <testcase name="recharge_whenAmountLessThan0_thenReturnFalse" time="0.001" classname="cn.mahjong.service.RechargeServiceImplTest"/>
  <testcase name="recharge_whenGiftLessThan0_thenReturnFalse" time="0.001" classname="cn.mahjong.service.RechargeServiceImplTest"/>
  <testcase name="recharge_whenInventoryIsEnoughReturnTrue" time="0.027" classname="cn.mahjong.service.RechargeServiceImplTest">
    <failure type="java.lang.NullPointerException">
      <![CDATA[java.lang.NullPointerException
	at cn.mahjong.service.impl.RechargeServiceImpl.recharge(RechargeServiceImpl.java:99)
	at cn.mahjong.service.RechargeServiceImplTest.recharge_whenInventoryIsEnoughReturnTrue(RechargeServiceImplTest.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:335)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:330)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
    </failure>
  </testcase> <!-- recharge_whenInventoryIsEnoughReturnTrue -->
  <testcase name="recharge_whenInventoryNotEnoughReturnFalse" time="0.003" classname="cn.mahjong.service.RechargeServiceImplTest"/>
  <testcase name="recharge_whenOperatorIdEquals0_thenReturnFalse" time="0.001" classname="cn.mahjong.service.RechargeServiceImplTest"/>
  <testcase name="recharge_whenOperatorIdLessThan0_thenReturnFalse" time="0.003" classname="cn.mahjong.service.RechargeServiceImplTest"/>
  <testcase name="recharge_whenOperatorIsNotInUsersParentUsers_thenReturnFalse" time="0.002" classname="cn.mahjong.service.RechargeServiceImplTest"/>
  <testcase name="recharge_whenUserIdEquals0_thenReturnFalse" time="0.002" classname="cn.mahjong.service.RechargeServiceImplTest"/>
  <testcase name="recharge_whenUserIdLessThan0_thenReturnFalse" time="0.001" classname="cn.mahjong.service.RechargeServiceImplTest"/>
  <testcase name="recharge_whenUserNotExist_thenReturnFalse" time="0.001" classname="cn.mahjong.service.RechargeServiceImplTest"/>
  <testcase name="personPurchaseSum_whenUserId_thenRerurn" time="0.001" classname="cn.mahjong.service.StatServiceImplTest"/>
  <testcase name="personSaleSum_whenUserId_thenRerurn" time="0.002" classname="cn.mahjong.service.StatServiceImplTest"/>
  <testcase name="getName_whenAnyTimes_thenReturnGuoDu" time="0.0" classname="cn.mahjong.service.GuoDuProviderTest"/>
  <testcase name="send_whenExceptionThrows_thenReturnFalse" time="0.088" classname="cn.mahjong.service.GuoDuProviderTest"/>
  <testcase name="send_whenStatusCodeEquals0_thenReturnTrue" time="0.167" classname="cn.mahjong.service.GuoDuProviderTest"/>
  <testcase name="send_whenStatusCodeNotEqualsMinus1_thenReturnFalse" time="0.064" classname="cn.mahjong.service.GuoDuProviderTest"/>
  <testcase name="changePhoneFirst_whenSmsCodeError_thenRerurnFalse" time="0.009" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="changePhoneFirst_whenSmsCode_thenRerurnTrue" time="0.002" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="changePhoneFirst_whenUserIdNotBindPhone_thenRerurnFalse" time="0.001" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="changePhoneFirst_whenUserIdNotExit_thenRerurnFalse" time="0.002" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="changePhoneSecond_whenChangePhoneSuccess_thenRerurnTrue" time="0.002" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="changePhoneSecond_whenSmsCodeError_thenRerurnFalse" time="0.001" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="changePhoneSecond_whenUserNotExit_thenRerurnFalse" time="0.001" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="changePhoneSecond_whenUserNotPhone_thenRerurnFalse" time="0.001" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="changePhoneSecond_whenUserPhoneNotEquals_thenRerurnFalse" time="0.001" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="changePwd_whenUpdatePwdFail_thenRerurnFalse" time="0.002" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="changePwd_whenUpdatePwdSuccess_thenRerurnFalse" time="0.002" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="changePwd_whenUserIdNotExit_thenRerurnFalse" time="0.001" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="findPwd_whenSmsCodeError_thenRerurnFalse" time="0.001" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="findPwd_whenUpdatePwdFail_thenRerurnFalse" time="0.002" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="findPwd_whenUpdatePwdSuccess_thenRerurnFalse" time="0.002" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="findPwd_whenUserIdNotBindPhone_thenRerurnFalse" time="0.001" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="findPwd_whenUserIdNotExit_thenRerurnFalse" time="0.001" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="findPwd_whenUserIsHead_thenReturnFalse" time="0.001" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="findPwd_whenUserIsHq_thenReturnFalse" time="0.001" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="findPwd_whenUserIsNotHead_thenReturnFalse" time="0.001" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="sendChangePhoneSms_whenSendSuccess_thenRerurnFalse" time="0.001" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="sendChangePhoneSms_whenUserIdNotBindPhone_thenRerurnFalse" time="0.0" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="sendChangePhoneSms_whenUserIdNotExit_thenRerurnFalse" time="0.002" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="sendFindPwdSms_whenSendSuccess_thenRerurnFalse" time="0.002" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="sendFindPwdSms_whenUserIdNotBindPhone_thenRerurnFalse" time="0.002" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="sendFindPwdSms_whenUserIdNotExit_thenRerurnFalse" time="0.093" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="sendSecondChangePhoneSms_whenUserIdExit_thenRerurnFalse" time="0.001" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="sendSecondChangePhoneSms_whenUserIdNotExit_thenRerurnFalse" time="0.001" classname="cn.mahjong.service.UserServiceImplTest"/>
  <testcase name="send_whenIsOverLimit_thenReturnFalse" time="0.021" classname="cn.mahjong.service.SMSServiceImplTest"/>
  <testcase name="send_whenIsVerifyCodeSMSAndArriveNextSendTime_thenReturnTrue" time="0.02" classname="cn.mahjong.service.SMSServiceImplTest"/>
  <testcase name="send_whenIsVerifyCodeSMSAndArriveNextSendTime_thenReturnTrue2" time="0.003" classname="cn.mahjong.service.SMSServiceImplTest"/>
  <testcase name="send_whenIsVerifyCodeSMSAndNotArriveNextSendTime_thenReturnFalse" time="0.001" classname="cn.mahjong.service.SMSServiceImplTest"/>
  <testcase name="validate_whenValidateFailed_thenReturnFalse" time="0.001" classname="cn.mahjong.service.SMSServiceImplTest"/>
  <testcase name="validate_whenValidateSuccess_thenReturnTrue" time="0.0" classname="cn.mahjong.service.SMSServiceImplTest"/>
  <testcase name="createAll_whenAnyTime_thenReturnAllProviders" time="0.001" classname="cn.mahjong.service.SPProviderFactoryTest"/>
  <testcase name="isNeedCaptcha_whenLoginErrorTimeEqual3_thenReturn" time="0.001" classname="cn.mahjong.service.LoginServiceImplTest"/>
  <testcase name="isNeedCaptcha_whenLoginErrorTimeLess3_thenReturn" time="0.0" classname="cn.mahjong.service.LoginServiceImplTest"/>
  <testcase name="isNeedCaptcha_whenLoginErrorTimeThan3_thenReturn" time="0.0" classname="cn.mahjong.service.LoginServiceImplTest"/>
  <testcase name="isNeedCaptcha_whenLoginNotErrorTime_thenReturn" time="0.0" classname="cn.mahjong.service.LoginServiceImplTest"/>
  <testcase name="isNeedCaptcha_whenLoginNotError_thenReturn" time="0.001" classname="cn.mahjong.service.LoginServiceImplTest"/>
  <testcase name="login_whenAccountIsBanned_thenReturnFalse" time="0.003" classname="cn.mahjong.service.LoginServiceImplTest"/>
  <testcase name="login_whenAccountIsHead_thenReturnFalse" time="0.001" classname="cn.mahjong.service.LoginServiceImplTest"/>
  <testcase name="login_whenAccountIsNotHead_thenReturnFalse" time="0.001" classname="cn.mahjong.service.LoginServiceImplTest"/>
  <testcase name="login_whenAccountNotExit_thenReturnFalse" time="0.001" classname="cn.mahjong.service.LoginServiceImplTest"/>
  <testcase name="login_whenAccountPwdError_thenReturnFalse" time="0.001" classname="cn.mahjong.service.LoginServiceImplTest"/>
  <testcase name="login_whenInsertLogFail_thenReturnFalse" time="0.001" classname="cn.mahjong.service.LoginServiceImplTest"/>
  <testcase name="login_whenLoginSuccess_thenReturnTrue" time="0.003" classname="cn.mahjong.service.LoginServiceImplTest"/>
  <testcase name="exchange_whenAmountLessThan0OrEquals0_thenReturnFalse" time="0.001" classname="cn.mahjong.service.ExchangeServiceTest"/>
  <testcase name="exchange_whenExchangeIsNotSuccess_thenReturnFalse" time="0.006" classname="cn.mahjong.service.ExchangeServiceTest"/>
  <testcase name="exchange_whenExchangeSuccess_thenReturnTrue" time="0.002" classname="cn.mahjong.service.ExchangeServiceTest"/>
  <testcase name="exchange_whenGameUserIdLessThan0OrEquals0_thenReturnFalse" time="0.0" classname="cn.mahjong.service.ExchangeServiceTest"/>
  <testcase name="exchange_whenGameUserNotExist_thenReturnFalse" time="0.002" classname="cn.mahjong.service.ExchangeServiceTest"/>
  <testcase name="exchange_whenGameUserNotExist_thenReturnFalse2" time="0.119" classname="cn.mahjong.service.ExchangeServiceTest"/>
  <testcase name="exchange_whenInventoryNotEnough2_thenReturnFalse" time="0.001" classname="cn.mahjong.service.ExchangeServiceTest"/>
  <testcase name="exchange_whenInventoryNotEnough_thenReturnFalse" time="0.001" classname="cn.mahjong.service.ExchangeServiceTest"/>
  <testcase name="exchange_whenUserIdLessThan0OrEquals0_thenReturnFalse" time="0.031" classname="cn.mahjong.service.ExchangeServiceTest"/>
  <testcase name="exchange_whenUserNotExist_thenReturnFalse" time="0.001" classname="cn.mahjong.service.ExchangeServiceTest"/>
  <testcase name="getSummary_whenDBQuerySuccess_thenReturnTrue" time="0.001" classname="cn.mahjong.service.ExchangeServiceTest"/>
  <testcase name="get_whenDBQuerySuccess_thenReturnTrue" time="0.001" classname="cn.mahjong.service.ExchangeServiceTest"/>
</testsuite> <!-- Default test -->
